name: Release

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build packages
    runs-on: ubuntu-latest
    timeout-minutes: 30 # Should not take more than 30 minutes to build with docs
    outputs:
      cache-primary-key: ${{ steps.build-cache.outputs.cache-primary-key }}
    steps:
      - uses: actions/checkout@v4

      - name: pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.0

      # Needed following Github's transition from Node 16 to 20
      - name: Install node-gyp
        run: pnpm add --global node-gyp

      - uses: actions/cache/restore@v4
        name: Check for build cache
        id: build-cache
        with:
          path: |
            charts/*/dist/*
            charts/*/tsdoc.json
            charts/*/stories.js
            chat/*/dist/*
            chat/*/tsdoc.json
            chat/*/stories.js
            packages/*/dist/*
            packages/*/tsdoc.json
            packages/*/stories.js
            tools/*/dist/*
            tools/*/tsdoc.json
            tools/*/stories.js
          key: ${{ runner.os }}-build-cache-${{ hashFiles('package.json', 'pnpm-lock.yaml', '**/src/') }}

      # Only setup & build if there was no build cache hit
      - name: Use Node 18
        uses: actions/setup-node@v4
        if: ${{ steps.build-cache.outputs.cache-hit != 'true' }}
        with:
          node-version: 18
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Install
        if: ${{ steps.build-cache.outputs.cache-hit != 'true' }}
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Build
        if: ${{ steps.build-cache.outputs.cache-hit != 'true' }}
        run: pnpm build

      - name: Generate docs
        if: ${{ steps.build-cache.outputs.cache-hit != 'true' }}
        run: pnpm build:docs

      - uses: actions/cache/save@v4
        name: Save build cache
        if: ${{ steps.build-cache.outputs.cache-hit != 'true' }}
        with:
          path: |
            charts/*/dist/*
            charts/*/tsdoc.json
            charts/*/stories.js
            chat/*/dist/*
            chat/*/tsdoc.json
            chat/*/stories.js
            packages/*/dist/*
            packages/*/tsdoc.json
            packages/*/stories.js
            tools/*/dist/*
            tools/*/tsdoc.json
            tools/*/stories.js
          key: ${{ steps.build-cache.outputs.cache-primary-key }}

  chromatic:
    name: Establish Chromatic baseline
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.0

      - name: Use Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - uses: actions/cache/restore@v4
        name: Restore build cache
        id: build-cache
        with:
          path: |
            charts/*/dist/*
            charts/*/tsdoc.json
            charts/*/stories.js
            chat/*/dist/*
            chat/*/tsdoc.json
            chat/*/stories.js
            packages/*/dist/*
            packages/*/tsdoc.json
            packages/*/stories.js
            tools/*/dist/*
            tools/*/tsdoc.json
            tools/*/stories.js
          key: ${{needs.build.outputs.cache-primary-key}}

      - name: Publish to Chromatic
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          buildScriptName: 'build-storybook'
          exitOnceUploaded: true
          exitZeroOnChanges: true
          autoAcceptChanges: true

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build]
    outputs:
      published: ${{ steps.changesets.outputs.published }}
      publishedPackages: ${{ steps.changesets.outputs.publishedPackages }}
    steps:
      - uses: actions/checkout@v4

      - name: pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.0

      - name: Use Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Updating .npmrc
        run: |
          cat << EOF > "$HOME/.npmrc"
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - uses: actions/cache/restore@v4
        name: Restore build cache
        id: build-cache
        with:
          path: |
            charts/*/dist/*
            charts/*/tsdoc.json
            charts/*/stories.js
            chat/*/dist/*
            chat/*/tsdoc.json
            chat/*/stories.js
            packages/*/dist/*
            packages/*/tsdoc.json
            packages/*/stories.js
            tools/*/dist/*
            tools/*/tsdoc.json
            tools/*/stories.js
          key: ${{needs.build.outputs.cache-primary-key}}

      - name: Version, Publish & Create GitHub Release
        id: changesets
        run: |
          set -e

          # 1. Publish packages, capturing the JSON summary report at the end.
          publish_output=$(pnpm publish -r --no-git-checks --report-summary || true)
          echo "$publish_output"
          
          # 2. Extract the JSON summary from the last line of the output.
          json_summary=$(echo "$publish_output" | tail -n 1)

          # 3. Check if any packages were actually published by checking the 'added' count.
          published_count=$(echo "$json_summary" | jq -r '.added')

          if [ "$published_count" -gt 0 ]; then
            echo "âœ… Successfully published $published_count package(s)."
            
            # 4. Extract the published package details into a compact JSON string.
            # This creates a JSON array like: '[{"name":"pkg-a","version":"1.0.0"},...]'
            published_packages=$(echo "$json_summary" | jq -c '.packages')
            
            # 5. Set both outputs for subsequent jobs.
            echo "published=true" >> "$GITHUB_OUTPUT"
            echo "publishedPackages=$published_packages" >> "$GITHUB_OUTPUT"
            
            # 6. Create Git tags and GitHub Releases.
            npx changeset tag
            git tag --points-at HEAD | xargs -I % sh -c 'gh release create % --generate-notes'

          else
            echo "No packages were published."
            
            # Set both outputs to their empty/false state.
            echo "published=false" >> "$GITHUB_OUTPUT"
            echo "publishedPackages=[]" >> "$GITHUB_OUTPUT"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  notify:
    name: Notify Slack & Website
    runs-on: ubuntu-latest
    needs: [build, release]
    if: ${{ needs.release.outputs.published == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.0

      # Needed following Github's transition from Node 16 to 20
      - name: Install node-gyp
        run: pnpm global add node-gyp

      - name: Install
        run: pnpm install --frozen-lockfile --prefer-offline

      - uses: actions/cache/restore@v4
        name: Restore build cache
        id: build-cache
        with:
          path: |
            charts/*/dist/*
            charts/*/tsdoc.json
            charts/*/stories.js
            chat/*/dist/*
            chat/*/tsdoc.json
            chat/*/stories.js
            packages/*/dist/*
            packages/*/tsdoc.json
            packages/*/stories.js
            tools/*/dist/*
            tools/*/tsdoc.json
            tools/*/stories.js
          key: ${{needs.build.outputs.cache-primary-key}}

      - name: Notify Slack channel of new releases
        id: slackbot
        run: pnpm slackbot release '${{ needs.release.outputs.publishedPackages }}'
        env:
          SLACK_BOT_TOKEN: '${{ secrets.SLACK_BOT_TOKEN }}'

  dispatch-to-website:
    name: Dispatch to Website repo
    runs-on: ubuntu-latest
    needs: [release]
    if: ${{ needs.release.outputs.published == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.0

      - name: Dispatch to Website repo
        uses: peter-evans/repository-dispatch@v2
        continue-on-error: true
        with:
          token: ${{ secrets.DESIGN_REPO_ACCESS_TOKEN }}
          repository: mongodb/design
          event-type: release-leafygreen-ui
          client-payload: '{ "packages": ${{ toJson(needs.release.outputs.publishedPackages) }} }'
